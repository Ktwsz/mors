from ortools.sat.python import cp_model
from itertools import product
model = cp_model.CpModel()
nc = 4
wa = model.new_int_var_from_domain(cp_model.Domain.FromValues(range(1, nc + 1)), 'wa')
nt = model.new_int_var_from_domain(cp_model.Domain.FromValues(range(1, nc + 1)), 'nt')
sa = model.new_int_var_from_domain(cp_model.Domain.FromValues(range(1, nc + 1)), 'sa')
q = model.new_int_var_from_domain(cp_model.Domain.FromValues(range(1, nc + 1)), 'q')
nsw = model.new_int_var_from_domain(cp_model.Domain.FromValues(range(1, nc + 1)), 'nsw')
v = model.new_int_var_from_domain(cp_model.Domain.FromValues(range(1, nc + 1)), 'v')
t = model.new_int_var_from_domain(cp_model.Domain.FromValues(range(1, nc + 1)), 't')
model.Add(wa != nt)
model.Add(wa != sa)
model.Add(nt != sa)
model.Add(nt != q)
model.Add(sa != q)
model.Add(sa != nsw)
model.Add(sa != v)
model.Add(q != nsw)
model.Add(nsw != v)
solver = cp_model.CpSolver()
status = solver.solve(model)
print('wa=' + str(solver.Value(wa)) + '', end='')
print(' nt=' + str(solver.Value(nt)) + '', end='')
print(' sa=' + str(solver.Value(sa)) + '\n', end='')
print('q=' + str(solver.Value(q)) + '', end='')
print(' nsw=' + str(solver.Value(nsw)) + '', end='')
print(' v=' + str(solver.Value(v)) + '\n', end='')
print('t=' + str(solver.Value(t)) + '\n', end='')